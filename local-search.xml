<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>codeforces0</title>
    <link href="/2023/03/09/codeforces0/"/>
    <url>/2023/03/09/codeforces0/</url>
    
    <content type="html"><![CDATA[<h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><ol><li><p>debug 能力太弱，因为一个小错误 de 了很久（而且代码 bug 意外多）</p></li><li><p>倍增树状数组不熟练</p></li><li><p>打 E 时以为 30 分钟可以，事实上确实可以。但</p><ol><li>最后频繁切页面看时间</li><li>最后因为多测试没清空而耽误时间</li><li>虽然第一反应是没清空，立马找到了树状数组，但手抖用 vim 粘贴按错了几次</li><li>树状数组维护不可逆信息不熟练</li></ol><p> <strong>所以没交上去</strong> :)</p></li><li><p>发现现在即使没有复健完，也能做一些题，以后可以多参加</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>debug 能力</li><li>改掉最后时刻看时间</li><li>一开始就注意多测试</li><li>倍增树状数组和树状数组维护不可逆信息</li></ol>]]></content>
    
    
    <categories>
      
      <category>program</category>
      
      <category>codeforces</category>
      
    </categories>
    
    
    <tags>
      
      <tag>codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编码</title>
    <link href="/2023/02/15/%E7%BC%96%E7%A0%81/"/>
    <url>/2023/02/15/%E7%BC%96%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html">博客</a></p><h2 id="ASCII-编码"><a href="#ASCII-编码" class="headerlink" title="ASCII 编码"></a>ASCII 编码</h2><p>规定了 128 个字符编码。只占用一个字节的 7 位，最高位统一为 0</p><h2 id="非-ASCII-编码"><a href="#非-ASCII-编码" class="headerlink" title="非 ASCII 编码"></a>非 ASCII 编码</h2><p>因为 ASCIi 编码不够，所以需要 GB2312 等编码</p><h2 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h2><p>Unicode，如其名字，给所有符号（包括一些 emoji）进行编码。可查询 &lt;unicode.org&gt;</p><p>但 Unicode 只规定了符号的二进制代码，没规定二进制代码如何存储。如<strong>严</strong>字，Unicode 是十六进制数 <code>4E25</code>，二进制有 15 位，至少两个字节。还可能需要 3 个字节，4 个字节，甚至更多。</p><p>这就有问题。怎么知道一个字符有几个字节。如果规定字节，那么浪费太多。所以这样 Unicode 一直没有推广</p><h2 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h2><p>UTF-8 是<strong>一种 Unicode 的实现方式</strong>，是一种变长的编码方式，可以用 1~4 个字节表示一个符号。注意 GB2312，GBK 不是 Unicode 的实现方式</p><p>编码规则：</p><ol><li><p>对于单字节的符号，字节的第一位设为0，后面7位为这个符号的 Unicode 码。因此对于英语字母，UTF-8 编码和 ASCII 码是相同的。</p></li><li><p>对于n字节的符号（n &gt; 1），第一个字节的前n位都设为1，第n + 1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的 Unicode 码</p><p> 10 开头的好处即 <a href="https://en.wikipedia.org/wiki/Self-synchronizing_code">self-synchronizing code</a>，假设一个及其糟糕的场景，文本开头丢失了一个字节，造成了后续所有文本的失效，当然没有 self-syschronizing 特性的编码还有很多其他坏处，参见 <a href="https://stackoverflow.com/questions/53009692/utf-8-encoding-why-prefix-10">为什么 UTF-8 以 10 开头</a></p></li><li><p><a href="https://baike.baidu.com/item/ANSI/10401940">ANSI 编码</a>，ANSI 不是一种特定的编码，在不同系统中表示不同的编码，具体是以 <a href="https://en.wikipedia.org/wiki/Code_page">Windows code pages</a> 区分，如 936 的 GBK，950 的 Big-5</p></li><li><p>notepad 中 UTF-8 LE UTF-8 BE 分别代表的是小端还是大端。</p></li><li><p><a href="https://en.wikipedia.org/wiki/Byte_order_mark">Byte_order_mark</a>，每个文件最前面分别加入一个表示编码顺序的字符，用 FEFF 表示（在 Unicode 中代表 零宽度非换行空格），正好两个字节，而且 FF 比 FE 大 1，根据这两个字节谁在前谁在后判断是什么顺序。对于 UTF-8 则是添加其对应的 <code>EF BB BF</code> 来判断。注意这是可选的，添加了反而可能会对一些软件造成干扰</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>program</category>
      
      <category>other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>encode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>密码</title>
    <link href="/2023/02/07/%E5%AF%86%E7%A0%81/"/>
    <url>/2023/02/07/%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<ul><li><p>散列（hash）函数，对称加密，非对称加密</p></li><li><p>散列函数无密钥，能被彩虹表（一种以空间换时间的密码破解算法）破解，但可以通过添加盐的方式使之更不容易被破解，目的是获得文件的摘要（hash 值），可用于密码验证。如 MD5，SHA-2 等。</p></li><li><p>对称加密是指加密和解密的密钥相同。</p></li><li><p>非对称加密指加密和解密的密钥不同。一般来说公钥加密，私钥解密（公钥是公开的，如果所有人都可以用公钥解密那加密就没有意义了）。在数字签名时用私钥加密，公钥解密。即公钥和私钥都可以用来加密或解密。按照RSA算法的定义，公钥是(n,e) 私钥是(n,d)。从数学角度来说地位对等的。</p><p>  这只是从加密算法的角度讲，但实际上，私钥文件可以计算出公钥文件。这是因为私钥文件会包含更多信息（你会发现私钥文件更长），根据 pkcs （全称Public-Key Cryptography Standards （公开秘钥加密标准 ）），私钥包含(n,e,d,p,q)，公钥包含(n,e)。</p></li><li><p>对称加密常见有 AES，DES，IDEA；非对称加密常见有 RSA 算法</p></li><li><p>压缩包密码用到的就是对称加密，密钥即是输入的密码，但密码常常位数不够，需要 PBE（Password Based Encryption）算出真正的密钥。下载完整性验证用的散列函数。</p></li><li><p>为了解决传递密钥问题，提出了 DH 算法，确切来说 DH 算法是密钥协商算法，利用数学理论相互之间传递一些公开的值，自己保留一些值，最后计算出来的结果是一样的（神奇）。</p></li><li><p>非对称加密的有效攻击方式是中间人攻击。</p></li><li><p>签名算法是指私钥加密，公钥解密来确认是否是某个发送方发出的，使之不能被伪造。现实应用中不是对原始消息签名，而是对原始消息的 hash 值进行签名。而解密时将解密内容与 hash 值进行对比。</p><p>  数字签名用于：</p><ol><li>防止伪造；</li><li>防止抵赖；</li><li>防止篡改。</li></ol><p>  常用的数字签名算法包括：MD5withRSA／SHA1withRSA／SHA256withRSA／SHA1withDSA／SHA256withDSA／SHA512withDSA／ECDSA等。</p></li><li><p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1304227968188450">数字证书</a><br>  <a href="https://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html">证书</a></p></li><li><p><a href="https://blog.csdn.net/zyz770834013/article/details/81380608">ssh 具体流程</a>，服务器可能会被多个客户端连接，所以应该存公钥（否则私钥泄露），具体流程见链接。SSH 用账号密码登录也会有临时的不对称加密，所用到的公钥私钥不同于事先生成的。</p></li><li><p><a href="https://www.cnblogs.com/xjnotxj/p/9311160.html">ssh 学习</a></p><p>  <a href="https://www.ruanyifeng.com/blog/2011/12/ssh_port_forwarding.html">端口转发</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>program</category>
      
      <category>other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cryptography</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo</title>
    <link href="/2023/02/07/hexo/"/>
    <url>/2023/02/07/hexo/</url>
    
    <content type="html"><![CDATA[<ul><li>public 文件夹是网站的实质内容</li><li>scaffolds 存模板</li><li>source 里面可以存源资源文件（如 文档，css，js，图片等）</li><li>hexo g 就会将 source 里面的资源文件转化为网站静态文件到 public 中。如更新各页面的 index.html，将 post.md 转化为相应时间目录的 html 文件，复制 source&#x2F;images 等文件夹到 public 中（如 images）等等。</li><li>hexo new page test 将产生一个新页面，在 source 文件中生成 test&#x2F;index.md，<code>hexo g</code>后将会在 <code>public</code> 中产生相应文件夹及 html 文件。</li><li>但神奇的是，没有 <code>hexo clean</code> 清除 public 文件夹后仍可以访问 source 中的资源…(从此来看，是 hexo 没有 public 时，会实时渲染 source 中的资源？)</li><li>部署服务器可以用 githubaction 来 ftp 传输。也可以用 ssh 。</li><li>目前采用方案是本机存储所有，服务器只部署 public 文件夹。将笔记目录与 source 目录创建软链接，忽略本来目录的 .md 文件，需要发布时，将文件移入 _posts 文件中。部署设置设为 git，github 仓库也只存 public 文件夹，再用 githubaction 将 public 文件夹传到服务器上，可能需要考虑运行清空脚本。</li></ul>]]></content>
    
    
    <categories>
      
      <category>program</category>
      
      <category>tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>tool</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown tips</title>
    <link href="/2023/02/01/markdown/"/>
    <url>/2023/02/01/markdown/</url>
    
    <content type="html"><![CDATA[<h2 id="some-tips"><a href="#some-tips" class="headerlink" title="some tips"></a>some tips</h2><ol><li>use # for head.</li><li>use two spaces and a return or &lt;br&gt; for a line break.</li><li>use a blank line for another paragraph.</li><li>use ** ** for bold.</li><li>use * * for italic.</li><li>use *** for bold and italic.</li><li>use &gt; for blockquotes.</li><li>use 1. for ordered list.</li><li>use - for unordered list.</li><li>use four spaces or a tab for adding elementsin list(remember to add a blank line to indicate it’s a new paragraph, or it maybe just a space. Associate it with the knowledge of block in html).</li><li>use `&#96;&#96; &#96;&#96;&#96; for block code.</li><li>use ` &#96; for inline code.</li><li>use double backticks enclosing the word for escaping `. like <code>he`llo</code></li><li>look link like this <a href="https://www.google.com/" title="google">google</a>.</li><li>quickly turn a URL or email address into a link. <a href="mailto:&#108;&#x6c;&#x6c;&#101;&#x69;&#x67;&#111;&#x69;&#110;&#x67;&#64;&#x67;&#97;&#x6d;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;">&#108;&#x6c;&#x6c;&#101;&#x69;&#x67;&#111;&#x69;&#110;&#x67;&#64;&#x67;&#97;&#x6d;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;</a> <a href="https://www.google.com/">https://www.google.com</a></li><li><a href="https://www.markdownguide.org/basic-syntax/#formatting-links">Formatting Links</a></li><li><a href="https://www.markdownguide.org/basic-syntax/#reference-style-links">Reference-style Links</a></li><li><a href="https://www.markdownguide.org/basic-syntax/#linking-images">Linking Images</a></li><li>see extended syntax <a href="https://www.markdownguide.org/extended-syntax/">https://www.markdownguide.org/extended-syntax/</a></li><li>GFM doesn’t support</li></ol>]]></content>
    
    
    <categories>
      
      <category>program</category>
      
      <category>other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>qt</title>
    <link href="/2022/11/19/qt/"/>
    <url>/2022/11/19/qt/</url>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ol><li><p>基类</p><p>qwidget 父类，qmainwindow，qdialog子类</p><p>qwidget什么都没有，qmainwindow有菜单栏，工具栏，状态栏，qdialog对话框</p></li><li><p>QApplication</p></li><li><p>show 默认顶层弹出</p><p>setParant 设置依附对象</p><p>setText</p><p>move</p><p>resize</p><p>setFixedSize</p><p>setWindowTitle</p></li><li><p>对象树</p><p>当父类释放时，子类也会被释放</p><p>setparent 会将儿子放在父亲的子树下，所以父亲释放时，儿子也会跟着释放</p></li><li><p>信号函数的参数应大于等于槽函数参数，且信号参数应与槽函数前面的对应</p></li><li><p>connect 第三个参数是 this 则可以省略</p></li><li><p>多个的可以new，最多有一个的已经被封装好了，直接用 statusBar(),toolBar()</p></li><li><p>qt 中的事件 相当于自动 connect 了信号（如鼠标点击，移动，离开）与  槽 event()，然后event再向下分发事件（重写的event事件）</p><p>qt-&gt;button() 是返回瞬间状态</p><p>qt-&gt;buttons() 是返回持续状态，用按位与</p><p>设置鼠标追踪后，鼠标不需要按下，移动事件就能返回</p></li><li><p>在 重写event 事件来拦截<br>static_cast dynamic_cast</p></li><li><p>如果按钮没有出现，则需要 btn-&gt;show()，或者说写错位置了..</p></li><li><p>注意 animation的内存泄露问题，而且animation只能在结束动画后才能被回收。所以在父亲析构函数中需要写动画的停止。而且 animation-&gt;start(QAbstractAnimation::DeleteWhenStopped); 来保证停止时能够被回收</p></li><li><p>animation 运动会改变坐标，但如果立马启动弹回的animation（那时候还没弹走，即此时的 this-&gt;y 还没变，所以说等待前一个animation结束后，后一个animation开始时接受的y仍是没变的）</p></li><li><p>setupui(parent) 来重复利用ui</p></li><li><p>鼠标冲突事件</p></li><li><p>setAttribute,WA_TransparentForMouseEvents</p></li><li><p>WA_onclose</p></li><li><p>setAlignment,Qt::AlignHCenter</p></li><li><p>disconnect 中 0 代表任意对象</p></li><li><p>QFile</p><p>getChar, readLine, Getall</p></li><li><p>设置图片步骤</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++">QLabel * label = <span class="hljs-keyword">new</span> QLabel;<br>QPixmap pixmap;<br>pixmap.<span class="hljs-built_in">load</span>(<span class="hljs-string">&quot;&quot;</span>);<br>label-&gt;<span class="hljs-built_in">setParent</span>(<span class="hljs-keyword">this</span>);<br>label-&gt;<span class="hljs-built_in">setPixmap</span>(pixmap);<br>label-&gt;<span class="hljs-built_in">setFixedSize</span>(pixmap.<span class="hljs-built_in">size</span>());<br>label-&gt;<span class="hljs-built_in">move</span>();<br><br><span class="hljs-comment">// 不在构造函数中的需要手动 show();</span><br></code></pre></td></tr></table></figure></li><li><p>sound</p></li><li><p>通过 xx-&gt;parent 得到父亲</p></li><li><p>setGeometry</p></li><li><p>进入和出去场景的 setGeometry 都是在上一个场景中设置</p></li><li><p>通过将 qt版本下的bin文件加入到环境变量中 即可以直接使用 windeployqt 来打包</p></li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li>alt + enter 添加定义</li></ol><h2 id="控件"><a href="#控件" class="headerlink" title="控件"></a>控件</h2><h3 id="QPushButton"><a href="#QPushButton" class="headerlink" title="QPushButton"></a>QPushButton</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">QPixmap pixmap;<br>pixmap.<span class="hljs-built_in">load</span>(normalImagePath);<br><span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">setFixedSize</span>(pixmap.<span class="hljs-built_in">width</span>(), pixmap.<span class="hljs-built_in">height</span>());<br><span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">setStyleSheet</span>(<span class="hljs-string">&quot;QPushButton&#123;border:0px;&#125;&quot;</span>);<br><span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">setIcon</span>(pixmap);<br><span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">setIconSize</span>(<span class="hljs-built_in">QSize</span>(pixmap.<span class="hljs-built_in">width</span>(), pixmap.<span class="hljs-built_in">height</span>()));<br></code></pre></td></tr></table></figure><h3 id="QWidget"><a href="#QWidget" class="headerlink" title="QWidget"></a>QWidget</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">setFixedSize</span>(<span class="hljs-number">320</span>, <span class="hljs-number">588</span>);<br><span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">setWindowIcon</span>(<span class="hljs-built_in">QIcon</span>(<span class="hljs-built_in">QPixmap</span>(<span class="hljs-string">&quot;:/res/Coin0001.png&quot;</span>)));<br><span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">setWindowTitle</span>(<span class="hljs-string">&quot;翻金币捏&quot;</span>);<br><br><br><span class="hljs-comment">//设置窗口为圆角必须设置背景透明和无边框</span><br><span class="hljs-built_in">setAttribute</span>(Qt::WA_TranslucentBackground);<span class="hljs-comment">//设置背景透明</span><br><span class="hljs-built_in">setWindowFlags</span>(Qt::FramelessWindowHint);<span class="hljs-comment">//无边框</span><br></code></pre></td></tr></table></figure><h3 id="QMenuBar-QMenu-QAction"><a href="#QMenuBar-QMenu-QAction" class="headerlink" title="QMenuBar QMenu QAction"></a>QMenuBar QMenu QAction</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++">QMenuBar *bar = <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">menuBar</span>();<br><span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">setMenuBar</span>(bar);<br>QMenu * startMenu = bar-&gt;<span class="hljs-built_in">addMenu</span>(<span class="hljs-string">&quot;开始&quot;</span>);<br>QAction * quitAction = startMenu-&gt;<span class="hljs-built_in">addAction</span>(<span class="hljs-string">&quot;退出&quot;</span>);<br><span class="hljs-built_in">connect</span>(quitAction, &amp;QAction::triggered, [=]()&#123;<br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">close</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="QLabel"><a href="#QLabel" class="headerlink" title="QLabel"></a>QLabel</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++">QLabel *label = <span class="hljs-keyword">new</span> QLabel;<br>label-&gt;<span class="hljs-built_in">setParent</span>(menuBtn);<br>label-&gt;<span class="hljs-built_in">setFixedSize</span>(menuBtn-&gt;<span class="hljs-built_in">width</span>(), menuBtn-&gt;<span class="hljs-built_in">height</span>());<br>label-&gt;<span class="hljs-built_in">setText</span>(QString::<span class="hljs-built_in">number</span>(i + <span class="hljs-number">1</span>));<br>label-&gt;<span class="hljs-built_in">setAlignment</span>(Qt::AlignHCenter | Qt::AlignVCenter);<br></code></pre></td></tr></table></figure><h3 id="QFont"><a href="#QFont" class="headerlink" title="QFont"></a>QFont</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++">QFont font;<br>font.<span class="hljs-built_in">setFamily</span>(<span class="hljs-string">&quot;黑体&quot;</span>);<br>font.<span class="hljs-built_in">setPointSize</span>(<span class="hljs-number">20</span>);<br>font.<span class="hljs-built_in">setBold</span>(<span class="hljs-literal">true</span>);<br>label-&gt;<span class="hljs-built_in">setFont</span>(font);<br></code></pre></td></tr></table></figure><h3 id="QTimer"><a href="#QTimer" class="headerlink" title="QTimer"></a>QTimer</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++">QTimer::<span class="hljs-built_in">singleShot</span>(<span class="hljs-number">500</span>,<span class="hljs-keyword">this</span>, [=]()&#123;<br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">hide</span>();<br>    chooseScene-&gt;<span class="hljs-built_in">setGeometry</span>(<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">geometry</span>());<br>    chooseScene-&gt;<span class="hljs-built_in">show</span>();<br>&#125;);<br><br><br><br>QTimer * timer = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QTimer</span>();<br>nowTime = (z == <span class="hljs-number">1</span> ? <span class="hljs-number">8</span> : <span class="hljs-number">1</span>);<br><span class="hljs-built_in">connect</span>(timer, &amp;QTimer::timeout, [=]()<br>        &#123;<br>            QPixmap pixmap;<br>            QString str = <span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;:res/Coin000%1.png&quot;</span>).<span class="hljs-built_in">arg</span>(nowTime);<br>            <span class="hljs-keyword">if</span>(z == <span class="hljs-number">1</span>) --nowTime;<br>            <span class="hljs-keyword">else</span> ++nowTime;<br>            pixmap.<span class="hljs-built_in">load</span>(str);<br>            <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">setFixedSize</span>(pixmap.<span class="hljs-built_in">size</span>());<br>            <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">setStyleSheet</span>(<span class="hljs-string">&quot;QPushButton&#123;border:0px;&#125;&quot;</span>);<br>            <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">setIcon</span>(pixmap);<br>            <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">setIconSize</span>(<span class="hljs-built_in">QSize</span>(pixmap.<span class="hljs-built_in">size</span>()));<br>            <span class="hljs-keyword">if</span>(nowTime == <span class="hljs-number">9</span> || nowTime == <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(myStd) ((PlayScene *)(<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">parent</span>()))-&gt;isOpt = <span class="hljs-number">0</span>;<br>                timer-&gt;<span class="hljs-built_in">stop</span>(), <span class="hljs-built_in">delete</span>(timer);<br>            &#125;<br>        &#125;);<br>timer-&gt;<span class="hljs-built_in">start</span>(<span class="hljs-number">30</span>);<br></code></pre></td></tr></table></figure><h3 id="QSoundEffect"><a href="#QSoundEffect" class="headerlink" title="QSoundEffect"></a>QSoundEffect</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">QSoundEffect *chooseSound = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QSoundEffect</span>(<span class="hljs-keyword">this</span>),<br>*backSound = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QSoundEffect</span>(<span class="hljs-keyword">this</span>);<br>chooseSound-&gt;<span class="hljs-built_in">setSource</span>(QUrl::<span class="hljs-built_in">fromLocalFile</span>(<span class="hljs-string">&quot;:/res/TapButtonSound.wav&quot;</span>)),<br>backSound-&gt;<span class="hljs-built_in">setSource</span>(QUrl::<span class="hljs-built_in">fromLocalFile</span>(<span class="hljs-string">&quot;:/res/BackButtonSound.wav&quot;</span>));<br><br>chooseSound-&gt;<span class="hljs-built_in">play</span>();<br></code></pre></td></tr></table></figure><h3 id="QPropertyAnimation"><a href="#QPropertyAnimation" class="headerlink" title="QPropertyAnimation"></a>QPropertyAnimation</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++">QPropertyAnimation *animation = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QPropertyAnimation</span>(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;geometry&quot;</span>);<br>animation-&gt;<span class="hljs-built_in">setDuration</span>(<span class="hljs-number">200</span>);<br><br><span class="hljs-keyword">if</span>(down)<br>&#123;<br> animation-&gt;<span class="hljs-built_in">setStartValue</span>(<span class="hljs-built_in">QRect</span>(<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">x</span>(), <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">y</span>(), <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">width</span>(), <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">height</span>()));<br> animation-&gt;<span class="hljs-built_in">setEndValue</span>(<span class="hljs-built_in">QRect</span>(<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">x</span>(), <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">y</span>() + <span class="hljs-number">50</span>, <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">width</span>(), <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">height</span>()));<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br> animation-&gt;<span class="hljs-built_in">setStartValue</span>(<span class="hljs-built_in">QRect</span>(<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">x</span>(), <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">y</span>() + <span class="hljs-number">50</span>, <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">width</span>(), <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">height</span>()));<br> animation-&gt;<span class="hljs-built_in">setEndValue</span>(<span class="hljs-built_in">QRect</span>(<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">x</span>(), <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">y</span>(), <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">width</span>(), <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">height</span>()));<br>&#125;<br>animation-&gt;<span class="hljs-built_in">setEasingCurve</span>(QEasingCurve::OutBounce);<br>animation-&gt;<span class="hljs-built_in">start</span>(QAbstractAnimation::DeleteWhenStopped);<br></code></pre></td></tr></table></figure><h3 id="QFile"><a href="#QFile" class="headerlink" title="QFile"></a>QFile</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">QFile <span class="hljs-title">path</span><span class="hljs-params">(<span class="hljs-string">&quot;:/res/data.txt&quot;</span>)</span></span>;<br><span class="hljs-comment">//显示背景</span><br>path.<span class="hljs-built_in">open</span>(QIODeviceBase::ReadOnly);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt; levelIndex; ++k)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> l = <span class="hljs-number">0</span>; l &lt; <span class="hljs-number">4</span>; ++l) path.<span class="hljs-built_in">readLine</span>(); <span class="hljs-comment">//readAll</span><br><br><span class="hljs-type">char</span> ch; path.<span class="hljs-built_in">getChar</span>(&amp;ch);   <br></code></pre></td></tr></table></figure><h2 id="NavBar"><a href="#NavBar" class="headerlink" title="NavBar"></a>NavBar</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">navigation</span> 导航<br></code></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ol><li><p>监听<br>this-&gt;grabKeyboard()</p></li><li><p>rect1.intersects(rect2);</p></li></ol><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="paintEvent"><a href="#paintEvent" class="headerlink" title="paintEvent"></a>paintEvent</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mainscene::paintEvent</span><span class="hljs-params">(QPaintEvent *)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">QPainter <span class="hljs-title">painter</span><span class="hljs-params">(<span class="hljs-keyword">this</span>)</span></span>;<br>    QPixmap pix;<br>    pix.<span class="hljs-built_in">load</span>(<span class="hljs-string">&quot;:/res/PlayLevelSceneBg.png&quot;</span>);<br>    painter.<span class="hljs-built_in">drawPixmap</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">width</span>(), <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">height</span>(), pix);<br><br>    pix.<span class="hljs-built_in">load</span>(<span class="hljs-string">&quot;:/res/Title.png&quot;</span>);<br>    pix.<span class="hljs-built_in">scaled</span>(<span class="hljs-number">0.5</span> * pix.<span class="hljs-built_in">width</span>(), <span class="hljs-number">0.5</span> * pix.<span class="hljs-built_in">height</span>());<br>    painter.<span class="hljs-built_in">drawPixmap</span>(<span class="hljs-number">10</span>, <span class="hljs-number">30</span>, pix);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="mousePressEvent-mouseReleaseEvent"><a href="#mousePressEvent-mouseReleaseEvent" class="headerlink" title="mousePressEvent mouseReleaseEvent"></a>mousePressEvent mouseReleaseEvent</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MyPushButton::mousePressEvent</span><span class="hljs-params">(QMouseEvent *event)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(pressImagePath != <span class="hljs-string">&quot;&quot;</span>)<br>    &#123;<br>        QPixmap pixmap;<br>        pixmap.<span class="hljs-built_in">load</span>(pressImagePath);<br>        <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">setFixedSize</span>(pixmap.<span class="hljs-built_in">width</span>(), pixmap.<span class="hljs-built_in">height</span>());<br>        <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">setStyleSheet</span>(<span class="hljs-string">&quot;QPushButton&#123;border:0px;&#125;&quot;</span>);<br>        <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">setIcon</span>(pixmap);<br>        <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">setIconSize</span>(<span class="hljs-built_in">QSize</span>(pixmap.<span class="hljs-built_in">width</span>(), pixmap.<span class="hljs-built_in">height</span>()));<br>    &#125;<br>    <span class="hljs-keyword">return</span> QPushButton::<span class="hljs-built_in">mousePressEvent</span>(event);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="QSS"><a href="#QSS" class="headerlink" title="QSS"></a>QSS</h2><p>HTML 中的样式表叫做CSS，同理QT中叫做QSS</p><p>用于设置控件背景图片、大小、字体颜色、字体类型、按钮状态变化等属性</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>选择器{property:value}</p><p>QPushButton, QWidget 等被称为选择器，{property:value}为属性和值</p><p>e.g. QPushButton{color: red}</p><p>QPushButton，QLineEdit，QComboBox  {color: red}</p><p>QPushButton {color: red;background-color:white;}，分号间隔，属性不区分大小写</p><p>通过 \ 来表示本行写不下，换行 &#x2F;&#x2F;直接换行也行</p><p>QPushButton:hover{<br>}</p><p>QPushButton:pressed{<br>}</p><p>linear-gradient</p><p>installEventFilter</p><p><strong>static_cast &lt; type-id &gt; ( expression )</strong></p><p>setHorizontalScrollBarPolicy(Qt::ScrollBarAlwaysOff);</p><p>QList <a href="https://blog.csdn.net/qq_43680827/article/details/123433763">QList使用总结</a></p><p>margin -&gt; border -&gt; padding -&gt; content</p><p>QButtonGruop 按钮组</p><p><a href="https://blog.csdn.net/potato123232/article/details/118788209">(5条消息) 32.QButtonGroup_Suyuoa的博客-CSDN博客_qbuttongroup</a></p><p>QRadioButton</p><p>group.addButton(btn1,-2); &#x2F;&#x2F;默认 -2 开始</p><p>QOverload&lt;int&gt;::of 指定参数为int的函数，不用函数指针了</p><p>QString::asprintf(“.&#x2F;images&#x2F;pictureMusic&#x2F;huayu%d.png”,i)<br>We do not recommend using QString::asprintf() in new Qt code. Instead, consider using QTextStream or arg(), both of which support Unicode strings seamlessly and are type-safe.</p><p>QString status &#x3D; QString(“Processing file %1 of %2: %3”)<br>                 .arg(i).arg(total).arg(fileName);</p><p>部件的sizePolicy属性用于说明部件在布局管理中的缩放方式，当部件没有在布局管理器中时，该设置无效。</p><p>在理解sizePolicy前，先介绍两个Qt内置的部件属性sizeHint和minimumSizeHint，分别表示部件的缺省大小、minimumSizeHint建议最小尺寸。</p><p>inputMethodHints属性只对输入部件有效，输入法使用它来检索有关输入法应如何操作的提示，例如，如果设置了只允许输入数字的标志，则输入法可能会更改其可视组件，以反映只能输入数字。相关取值及含义如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css">  自定义 item<br>QListWidgetItem * newWidget = new QListWidgetItem(ui-&gt;listCont);<br>   RankingItem * item = new  RankingItem();<br>   newWidget-&gt;setBackgroundColor(QColor(<span class="hljs-number">249</span>,<span class="hljs-number">249</span>,<span class="hljs-number">249</span>));<br>   newWidget-&gt;setSizeHint(QSize(item-&gt;<span class="hljs-attribute">width</span>(),item-&gt;<span class="hljs-attribute">height</span>()));<br>   item-&gt;setNum(<span class="hljs-number">1</span>,true);<br>   item-&gt;setStringOrPic(&quot;<span class="hljs-number">792%</span>&quot;);<br>   item-&gt;setMusicName(&quot;删了吧&quot;);<br>   item-&gt;setMusicAutor(&quot;烟(许佳豪)&quot;);<br>   ui-&gt;listCont-&gt;insertItem(<span class="hljs-number">0</span>,newWidget);<br>   ui-&gt;listCont-&gt;setItemWidget(newWidget,item);<br></code></pre></td></tr></table></figure><p>elipse 椭圆 rectangle 矩形</p><p>画笔指定图案的轮廓的样式</p><p>画刷指定图案的填充样式</p><p>raise</p><p>将此窗体提升到父窗体<a href="https://so.csdn.net/so/search?q=%E5%A0%86%E6%A0%88&spm=1001.2101.3001.7020">堆栈</a>的顶部。在此调用之后，<strong>窗体将位于任何重叠的同级窗体的前面</strong>。</p><p>注意:在使用activateWindow()时，可以调用这个函数来确保窗口被堆叠在顶部。</p><p><strong>void QWidget::activateWindow()：</strong></p><p>将包含此窗体的顶级窗体设置为活动窗口。活动窗口是具有键盘输入焦点的可见顶级窗口。此函数执行的操作与在顶级窗口的标题栏上单击鼠标相同。如果您希望确保窗口也位于顶部，那么还应该调用**raise()**。注意，窗口必须是可见的，否则activateWindow()不起作用。</p><p>可以看到，鼠标点击不同的控件，控制台也做出相应的打印。程序为了区分不同控件，通过样式表来设置不同控件填充不同的颜色，注意到，这里还使用了<code>setAttribute(Qt.WA_StyledBackground, True)</code>，这是因为黄色的中间控件，和红色的最里控件的父控件为自定义的控件，而非Qt官方控件，所以这个样式表默认是关闭的，故需要程序员添加使能代码方可生效。</p><p>加载背景图片几种方式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++">qss<br>border-image<br><br><br>QPalette<br>QWidget *itemPic;<br><span class="hljs-built_in">setAutoFillBackground</span>(<span class="hljs-literal">true</span>);<br>QPalette pal = ui-&gt;itemPic-&gt;<span class="hljs-built_in">palette</span>();<br>pal.<span class="hljs-built_in">setBrush</span>(QPalette::Background,<span class="hljs-built_in">QBrush</span>(<span class="hljs-built_in">QPixmap</span>(url)));<br><span class="hljs-comment">// pal.setColor(QPalette:Background, Qt::black);</span><br>ui-&gt;itemPic-&gt;<span class="hljs-built_in">setPalette</span>(pal);<br><br><br>QPaintEvent<br></code></pre></td></tr></table></figure><p>当我们<a href="https://so.csdn.net/so/search?q=%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6&spm=1001.2101.3001.7020">自定义控件</a>，并继承自QWidget时，使用QSS进行界面美化，会发现并不起作用。原因是因为QSS样式表的实现是通过paintEvent函数，而继承QWidget后，若没重写paintEvent函数，则会导致QSS样式表失效。</p><p>this-&gt;setAttribute(Qt::WA_StyledBackground);</p><p>一般我不用QSS设置窗口背景，也不建议使用。（这里是对于窗口而，如果是子部件当然可以）。因为窗口使用QSS设置背景之后，若子部件不使用同样的方式来设置，默认则会继承父窗口的样式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QWidget::setAutoFillBackground</span><span class="hljs-params">(<span class="hljs-type">bool</span> b)</span></span>;<br></code></pre></td></tr></table></figure><p>该函数用于设置当窗口作为被包含窗口时, 是否需要绘制背景。</p><p>注意：QT窗口系统默认状态下, 当一个窗口作为被包含窗口时, 其不再绘制背景, 即使指定了背景绘制参数(如背景颜色、背景图片等)。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs css">tabwidget<br><br><span class="hljs-comment">/*QTabWidget 的样式*/</span><br>QTabWidget::pane<br>&#123;<br> <span class="hljs-attribute">top</span>:<span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">border</span>: none;  <br>&#125;<br><span class="hljs-comment">/*个性推荐*/</span><br>QTabBar::tab<br>&#123; <br> <span class="hljs-attribute">background</span>:white;<br> <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">3px</span> solid <span class="hljs-built_in">rgb</span>(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>);<br> <span class="hljs-attribute">font-family</span>:<span class="hljs-string">&quot;微软雅黑&quot;</span>;<br> <span class="hljs-attribute">font-size</span>:<span class="hljs-number">16px</span>;<br> <span class="hljs-attribute">padding-left</span>:<span class="hljs-number">5px</span>;<br> <span class="hljs-attribute">padding-right</span>:<span class="hljs-number">5px</span>;<br> <span class="hljs-attribute">min-width</span>: <span class="hljs-number">85px</span>;<br> <span class="hljs-attribute">min-height</span>:<span class="hljs-number">30px</span>;  <br>&#125;<br><br>QTabBar::tab:selected<br>&#123;<br> <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">3px</span> solid <span class="hljs-built_in">rgb</span>(<span class="hljs-number">249</span>,<span class="hljs-number">238</span>,<span class="hljs-number">90</span>);<br> <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">55</span>,<span class="hljs-number">55</span>,<span class="hljs-number">55</span>);<br> <span class="hljs-attribute">font-size</span>:<span class="hljs-number">20px</span>;<br> <span class="hljs-attribute">font-weight</span>: bold;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs css">QListwidget<br>QListWidget<span class="hljs-selector-id">#listT3</span><br>&#123;<br> <span class="hljs-attribute">padding-top</span>:<span class="hljs-number">2px</span>;<br> <span class="hljs-attribute">border</span>:<span class="hljs-number">0px</span>;<br> <span class="hljs-attribute">color</span>:<span class="hljs-built_in">rgb</span>(<span class="hljs-number">55</span>,<span class="hljs-number">55</span>,<span class="hljs-number">55</span>);<br> <span class="hljs-attribute">background</span>:<span class="hljs-built_in">rgb</span>(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>);<br> <span class="hljs-attribute">padding-left</span>:<span class="hljs-number">15px</span>; <br>&#125;<br><br>QListWidget::Item#listT3<br>&#123;<br> <br> <span class="hljs-attribute">height</span>:<span class="hljs-number">38</span>;<br> <span class="hljs-attribute">border</span>:<span class="hljs-number">0px</span> solid <span class="hljs-built_in">rgb</span>(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>); <br><br>&#125;<br><br>QListWidget::Item:hover#listT3<br>&#123;<br> <span class="hljs-attribute">background</span>:<span class="hljs-built_in">rgb</span>(<span class="hljs-number">246</span>,<span class="hljs-number">246</span>,<span class="hljs-number">247</span>); <br>&#125;<br><span class="hljs-comment">/*选中*/</span><br>QListWidget::Item:selected#listT3<br>&#123;<br> <span class="hljs-attribute">font-size</span>:<span class="hljs-number">16</span>;<br> <span class="hljs-attribute">color</span>:<span class="hljs-built_in">rgb</span>(<span class="hljs-number">55</span>,<span class="hljs-number">55</span>,<span class="hljs-number">55</span>);<br> <span class="hljs-attribute">border</span>:<span class="hljs-number">0px</span>;<br> <span class="hljs-attribute">background</span>:<span class="hljs-built_in">rgb</span>(<span class="hljs-number">246</span>,<span class="hljs-number">246</span>,<span class="hljs-number">247</span>); <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">rgb<br><span class="hljs-number">159</span>,<span class="hljs-number">159</span>,<span class="hljs-number">159</span> 白灰 ,悬浮<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">images/邮件.png</span>);<br><br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/tjm1017/article/details/125932774">(5条消息) QScrollBar样式表（带注释）_雒珣的博客-CSDN博客_qscrollbar样式表</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css">QScrollBar:vertical&#123;<br> <span class="hljs-attribute">background</span>:transparent;<br> <span class="hljs-attribute">width</span>:<span class="hljs-number">6px</span>;<br>&#125;<br>QScrollBar::handle:vertical&#123;<br> <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">224</span>,<span class="hljs-number">224</span>,<span class="hljs-number">224</span>); <br> <span class="hljs-attribute">border-radius</span>:<span class="hljs-number">3px</span>;<br>&#125;<br>QScrollBar::add-line, QScrollBar::sub-line, QScrollBar::up-arrow:vertical, QScrollBar::down-arrow:vertical&#123;<br> <span class="hljs-attribute">border</span>:none;<br>&#125;<br> QScrollBar::add-page, QScrollBar::sub-page&#123;<br> <span class="hljs-attribute">background</span>: transparent;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">pushbutton<br><br>ui-&gt;ptnPer-&gt;setStyleSheet(&quot;QPushButton&#123;<span class="hljs-attribute">color</span>:<span class="hljs-built_in">rgb</span>(<span class="hljs-number">55</span>,<span class="hljs-number">55</span>,<span class="hljs-number">55</span>);<span class="hljs-attribute">border</span>:<span class="hljs-number">0px</span>;<span class="hljs-attribute">background</span>:<span class="hljs-built_in">rgb</span>(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>);<span class="hljs-attribute">border-radius</span>:<span class="hljs-number">14px</span>;&#125;&quot;<br>                            &quot;QPushButton<span class="hljs-selector-pseudo">:hover</span>&#123;<span class="hljs-attribute">border</span>:<span class="hljs-number">0px</span>;<span class="hljs-attribute">background</span>:<span class="hljs-built_in">rgb</span>(<span class="hljs-number">244</span>,<span class="hljs-number">244</span>,<span class="hljs-number">244</span>);<span class="hljs-attribute">border-radius</span>:<span class="hljs-number">14px</span>;&#125;&quot;<br>                            &quot;QPushButton<span class="hljs-selector-pseudo">:checked</span>&#123;<span class="hljs-attribute">color</span>:<span class="hljs-built_in">rgb</span>(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>);<span class="hljs-attribute">border</span>:<span class="hljs-number">0px</span>;<span class="hljs-attribute">background</span>:<span class="hljs-built_in">rgb</span>(<span class="hljs-number">187</span>,<span class="hljs-number">187</span>,<span class="hljs-number">187</span>);<span class="hljs-attribute">border-radius</span>:<span class="hljs-number">14px</span>;&#125;&quot;);<br></code></pre></td></tr></table></figure><p>发现没对齐，很可能是窗口小了的缘故</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">ui-&gt;pushButton-&gt;setStyleSheet(&quot;QPushButton&#123;<span class="hljs-attribute">border-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">./images/Messageform/like.png</span>);&#125;&quot;);<br>自动圆角？<br><br>通过直接加载pixmap 来设置单一图片<br></code></pre></td></tr></table></figure><p>on_pushButton_close_clicked  qt自动connect</p><p>580 * 380</p><p>按钮大小 520, 65</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs css">*&#123;<br> <span class="hljs-attribute">font-family</span>: 微软雅黑;<br> <span class="hljs-attribute">font-weight</span>: bold;<br> <span class="hljs-attribute">color</span>: white;<br>&#125;<br>QFrame&#123;<br> <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">qlineargradient</span>(x1:<span class="hljs-number">1</span>, y1:<span class="hljs-number">1</span>, x2:<span class="hljs-number">1</span>, y2:<span class="hljs-number">0</span>, stop:<span class="hljs-number">0</span>   <span class="hljs-built_in">rgba</span>(<span class="hljs-number">48</span>,<span class="hljs-number">207</span>,<span class="hljs-number">208</span>, <span class="hljs-number">1</span>), stop: <span class="hljs-number">1</span>  <span class="hljs-built_in">rgba</span>(<span class="hljs-number">51</span>,<span class="hljs-number">8</span>,<span class="hljs-number">103</span>, <span class="hljs-number">1</span>));<br> <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">15px</span>;<br>&#125;<br>QLabel&#123;<br> <span class="hljs-attribute">background</span>: transparent;<br> <span class="hljs-attribute">font-size</span>: <span class="hljs-number">24px</span>;<br>&#125;<br>QPushButton&#123;<br> <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">89</span>, <span class="hljs-number">114</span>, <span class="hljs-number">255</span>);<br> <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">15px</span>;<br> <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>&#125;<br>QLineEdit&#123;<br> <span class="hljs-attribute">background-color</span>: white;<br> <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">89</span>, <span class="hljs-number">114</span>, <span class="hljs-number">255</span>);<br> <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">15px</span>;<br> <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span><br>&#125;<br></code></pre></td></tr></table></figure><p>圆角参数一般正好是圆形</p><h2 id="1、QByteArray转QString"><a href="#1、QByteArray转QString" class="headerlink" title="1、QByteArray转QString"></a>1、QByteArray转QString</h2><p>QByteArray Data;</p><p>QString str &#x3D; QString(Data);</p><h2 id="2、QString转QByteArray"><a href="#2、QString转QByteArray" class="headerlink" title="2、QString转QByteArray"></a>2、QString转QByteArray</h2><p>QByteArray by1 &#x3D; str.toLatin1();</p><p>QByteArray by2 &#x3D; str.toLocal8Bit();</p><p>QString to char</p><p>QString str;<br>char* ch;<br>QByteArray ba &#x3D; str.toLatin1(); &#x2F;&#x2F; must<br>ch&#x3D;ba.data();</p><p>取消选择白边</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">ui-&gt;menu-&gt;<span class="hljs-built_in">setFocusPolicy</span>(Qt::NoFocus);<br></code></pre></td></tr></table></figure><p>读文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-comment">//开始读文件</span><br><span class="hljs-keyword">while</span> (!stream.<span class="hljs-built_in">atEnd</span>())<br>&#123;<br> <span class="hljs-comment">//读取每一行，去除首位空格</span><br> QString line = stream.<span class="hljs-built_in">readLine</span>().<span class="hljs-built_in">trimmed</span>();<br><br> <span class="hljs-comment">//特殊标记的提示信息，直接跳过不读</span><br> <span class="hljs-keyword">if</span> (line.<span class="hljs-built_in">isEmpty</span>() || line.<span class="hljs-built_in">startsWith</span>(<span class="hljs-string">&quot;#&quot;</span>)) <span class="hljs-keyword">continue</span>;<br><br> <span class="hljs-comment">//将每一行的信息按字符串进行分割，QRegExp(&quot;\\s+&quot;)以空格作为拆分！SkipEmptyParts跳过空格</span><br> QStringList strs = line.<span class="hljs-built_in">split</span>(<span class="hljs-built_in">QRegExp</span>(<span class="hljs-string">&quot;\\s+&quot;</span>), QString::SkipEmptyParts);<br> <br> <span class="hljs-comment">//线号，同一个线号下的数据，全部存起来，直到出if循环，ptNum++即线号变了</span><br> <span class="hljs-keyword">if</span> (strs[<span class="hljs-number">0</span>] != lineNum)<br> &#123;<br>  lineNum = strs[<span class="hljs-number">0</span>];<br>  pSurveyLine = <span class="hljs-keyword">new</span> <span class="hljs-built_in">GSurveyLine</span>(lineNum);<br>  surveyLines.<span class="hljs-built_in">append</span>(pSurveyLine);<br>  ptNum = <span class="hljs-number">1</span>;<br> &#125;<br><br> pSurveyPoint = <span class="hljs-keyword">new</span> <span class="hljs-built_in">GSurveyPoint</span>();<br> pSurveyLine-&gt;<span class="hljs-built_in">getSurveyPoints</span>() &lt;&lt; pSurveyPoint;<br><br> pSurveyPoint-&gt;mPointNum = ptNum++;<br> pSurveyPoint-&gt;mInvalidMask = <span class="hljs-number">1</span>;<br> pSurveyPoint-&gt;mDateTime = strs[<span class="hljs-number">3</span>];<br> pSurveyPoint-&gt;mLongitude = strs[<span class="hljs-number">4</span>].<span class="hljs-built_in">toDouble</span>();<br> pSurveyPoint-&gt;mLatitude = strs[<span class="hljs-number">5</span>].<span class="hljs-built_in">toDouble</span>();<br> pSurveyPoint-&gt;mElevation = strs[<span class="hljs-number">6</span>].<span class="hljs-built_in">toDouble</span>();<br> pSurveyPoint-&gt;mPX = strs[<span class="hljs-number">7</span>].<span class="hljs-built_in">toDouble</span>();<br> pSurveyPoint-&gt;mPY = strs[<span class="hljs-number">8</span>].<span class="hljs-built_in">toDouble</span>();<br> pSurveyPoint-&gt;mCoilHeight = strs[<span class="hljs-number">9</span>].<span class="hljs-built_in">toDouble</span>();<br> pSurveyPoint-&gt;mLX = <span class="hljs-number">0</span>;<br> pSurveyPoint-&gt;mLY = <span class="hljs-number">0</span>;<br> pSurveyPoint-&gt;mYaw = strs[<span class="hljs-number">10</span>].<span class="hljs-built_in">toDouble</span>();<br> pSurveyPoint-&gt;mPitch = strs[<span class="hljs-number">11</span>].<span class="hljs-built_in">toDouble</span>();<br> pSurveyPoint-&gt;mRoll = strs[<span class="hljs-number">12</span>].<span class="hljs-built_in">toDouble</span>();<br><br> <span class="hljs-comment">//数据部分，签名的必要信息存完了，用字符串数目-固定列，剩下的列就是数据部分</span><br> <span class="hljs-type">int</span> n = strs.<span class="hljs-built_in">count</span>() - FIXED_COL_NUM;<br> <span class="hljs-type">double</span> data;<br> <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br> &#123;<br>  <span class="hljs-comment">//数据部分开始的下标</span><br>  data = strs[FIXED_COL_NUM + i].<span class="hljs-built_in">toDouble</span>();<br>  pSurveyPoint-&gt;mDatas &lt;&lt; data;<br>  pSurveyPoint-&gt;mErrors &lt;&lt; <span class="hljs-number">0.0</span>;<br> &#125;<br>&#125;<br><br><span class="hljs-comment">//读取文件后一定要关闭！</span><br>file.<span class="hljs-built_in">close</span>();<br><br>qtextstream 常用方法 https:<span class="hljs-comment">//blog.csdn.net/qq_21291397/article/details/107503522</span><br><br>QTextSteam in; <span class="hljs-type">int</span> num;<br>in &gt;&gt; num; <span class="hljs-comment">//读取数字</span><br></code></pre></td></tr></table></figure><p>数字转QString  QString::number(num); 或者用 arg</p><p>QString 转数字 .toint</p><p>不能两个QTextstream 读取同一个文件</p><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>右键，布局对齐：顶部，可以修改元素对齐位置</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">ui-&gt;descriptionText-&gt;<span class="hljs-built_in">document</span>()-&gt;<span class="hljs-built_in">adjustSize</span>();<br>ui-&gt;descriptionText-&gt;<span class="hljs-built_in">setFixedHeight</span>(ui-&gt;descriptionText-&gt;<span class="hljs-built_in">document</span>()-&gt;<span class="hljs-built_in">size</span>().<span class="hljs-built_in">rheight</span>());<br>qtextbrowser 等自适应<br></code></pre></td></tr></table></figure><p>readline 很有可能带有末尾空格，所以可用 trimmed()  方法来去除首尾空格</p><p>对于QListwidgetItem,用item-&gt;setData 可以很好地存储所有数据！！！</p><p>QTextStream 读取中文可能乱码，而 QFile 可能不会乱码</p><p>qt各种布局解释（策略啥的）</p><p><a href="http://www.javashuo.com/article/p-digkjgir-me.html">浅析 Qt 布局系统 - JavaShuo</a></p><p>通过设置最大尺寸来防止变样</p><p>设置垂直布局会尽可能填充，所以这时候可以加个弹簧</p><p>rgb(160, 255, 198); 青绿色</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++">清除 layout 布局<br>QLayoutItem *child;<br><span class="hljs-keyword">while</span> ((child = ui-&gt;quesLayout-&gt;<span class="hljs-built_in">takeAt</span>(<span class="hljs-number">0</span>)) != <span class="hljs-number">0</span>)<br>&#123;<br>    <span class="hljs-keyword">if</span>(child-&gt;<span class="hljs-built_in">widget</span>())<br>    &#123;<br>         child-&gt;<span class="hljs-built_in">widget</span>()-&gt;<span class="hljs-built_in">setParent</span>(<span class="hljs-literal">NULL</span>);<br>         <span class="hljs-keyword">delete</span> child-&gt;<span class="hljs-built_in">widget</span>();<span class="hljs-comment">//释放</span><br>     &#125;<br>    <span class="hljs-keyword">delete</span> child;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">tabwidget 关闭<br>    <span class="hljs-built_in">connect</span>(ui-&gt;tabWidget, &amp;QTabWidget::tabCloseRequested, [&amp;](<span class="hljs-type">int</span> index)&#123;<br>        QWidget *widget = ui-&gt;tabWidget-&gt;<span class="hljs-built_in">widget</span>(index);<br>        ui-&gt;tabWidget-&gt;<span class="hljs-built_in">removeTab</span>(index);<br>        <span class="hljs-built_in">delete</span>(widget);<br>    &#125;);<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">改变文本 QIoDevice<br>QIODevice::WriteOnly |QIODevice::Truncate| QIODevice::Text<br></code></pre></td></tr></table></figure><p>qt utf8 存储</p><p><a href="https://blog.csdn.net/qq_45662588/article/details/120348396">QString 存取中文</a></p><p>Qt::Key_Alt</p><p><em>Qt</em>::Key_Left</p><p>Qt::Key_Right</p><p>Qt::Key_Space</p><p>连续切换音乐会有问题</p>]]></content>
    
    
    <categories>
      
      <category>program</category>
      
      <category>qt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>qt</tag>
      
      <tag>gui</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git</title>
    <link href="/2022/09/19/git/"/>
    <url>/2022/09/19/git/</url>
    
    <content type="html"><![CDATA[<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="1-basics"><a href="#1-basics" class="headerlink" title="1. basics"></a>1. basics</h3><ul><li>ssh -T <a href="mailto:&#103;&#105;&#116;&#x40;&#103;&#105;&#x74;&#x68;&#117;&#x62;&#46;&#x63;&#111;&#x6d;">&#103;&#105;&#116;&#x40;&#103;&#105;&#x74;&#x68;&#117;&#x62;&#46;&#x63;&#111;&#x6d;</a> &#x2F;&#x2F;-T 就是不分配伪终端，只显示连接信息<br>   测试能否连接到 github<br>   确定已经有添加 ssh 密钥，确定 config 文件配置正确，确定能 ping 通 github.com</li><li>git init</li><li>git add (.)</li><li>git commit -m ‘’</li><li>git status</li><li>git rm</li><li>git cherry-pick &lt;commit&gt; (复制一个特定的提交到当前分支)</li><li>git blame filename 显示谁修改了文件</li></ul><h3 id="2-diff"><a href="#2-diff" class="headerlink" title="2. diff"></a>2. diff</h3><ul><li>git diff 工作区与暂存区<br>– &lt;filename&gt; 指定文件(注意空格)</li><li>git diff HEAD 工作区与 commit</li><li>git diff –chached(暂存区与commit)</li></ul><p>即未使用参数，默认是工作区与 xx 比较</p><h3 id="3-reset"><a href="#3-reset" class="headerlink" title="3. reset"></a>3. reset</h3><ul><li>git reset &lt;file&gt; (将某文件从暂存区移除，不修改工作区,不加文件是所有)</li><li>git reset –hard (移除暂存区修改，删除工作区修改)</li><li>git reset &lt;commit&gt; (可以用 head^ 回滚到指定版本，清除暂存区，但保持工作区不变)</li><li>git reset –hard &lt;commit&gt; (回滚到指定版本，清除暂存区，删除工作区修改)<br>git reflog 可以查看被删除的版本号</li></ul><p>–mixed 是默认参数，保留工作区，修改暂存区，不会移动 head 指针<br>–hard 修改工作区和暂存区，会移动 head 指针，此时提交会丢失指定版本之后的内容</p><h3 id="4-branch"><a href="#4-branch" class="headerlink" title="4. branch"></a>4. branch</h3><ul><li>git branch 显示分支</li><li>git branch &lt;branchname&gt; 创建分支<br>   -d 删除</li><li>git checkout &lt;branchname&gt; 切换分支<br>   -b &lt;name1&gt; (&lt;name2&gt;) 新建并切换到name1</li><li>git merge &lt;branchname&gt; 采用 Fast Forward 合并分支(此模式不会显示合并信息)<br>   –no-ff 不使用 Fast Forward 模式，会显示合并信息，会产生新的 commit 所以同时需要 -m 参数</li><li>git switch 作用同 checkout</li><li>git cherry pick &lt;commit&gt; 复制一个特定的提交到当前的分支(指复制相同的改动操作)</li><li>git rebase &lt;branchname&gt;</li><li>git branch –set-upstream-to &lt;branch-name&gt; origin&#x2F;&lt;branch-name&gt; 关联上游分支，不用记，会有提示</li></ul><h3 id="5-remote"><a href="#5-remote" class="headerlink" title="5. remote"></a>5. remote</h3><ul><li>git remote -v 查看远端仓库信息</li><li>git remote add &lt;name&gt; &lt;url&gt;(eg:<a href="mailto:&#x67;&#x69;&#x74;&#x40;&#103;&#105;&#x74;&#104;&#x75;&#98;&#46;&#x63;&#x6f;&#x6d;">&#x67;&#x69;&#x74;&#x40;&#103;&#105;&#x74;&#104;&#x75;&#98;&#46;&#x63;&#x6f;&#x6d;</a>:llleixx&#x2F;helloworld.git)</li><li>git remote rm &lt;name&gt; 删除远程仓库的绑定</li><li>git pull</li><li>git push &lt;remotename&gt; &lt;branchname&gt;(:&lt;branchname&gt;) 将某个分支推送到远端某个分支<br>   -u 关联远程分支<br>   -f 强制</li><li>git fetch</li><li>git push origin –delete branchname  删除远端分支</li><li>git clone &lt;name&gt; (eg:<a href="mailto:&#x67;&#x69;&#116;&#x40;&#103;&#x69;&#116;&#x68;&#x75;&#x62;&#x2e;&#x63;&#111;&#109;">&#x67;&#x69;&#116;&#x40;&#103;&#x69;&#116;&#x68;&#x75;&#x62;&#x2e;&#x63;&#111;&#109;</a>:llleixx&#x2F;helloworld.git)</li></ul><h3 id="6-log"><a href="#6-log" class="headerlink" title="6. log"></a>6. log</h3><ul><li>git log -&lt;limit&gt;<br>   &lt;limit&gt; 为最大显示数量</li><li>git log – &lt;file&gt;</li><li>git log –graph</li><li>git relog (命令历史)</li></ul><h3 id="7-stash"><a href="#7-stash" class="headerlink" title="7. stash"></a>7. stash</h3><ul><li>git stash 储存工作区和暂存区(切换分支会丢失工作区和暂存区信息)<br>   sava “message” 同时储存注释信息</li><li>git stash list 查看</li><li>git stash apply (&lt;stashname&gt;) 恢复但不删除stash，默认最新</li><li>git stash drop (&lt;stashname&gt;) 删除stash</li><li>git stash pop (&lt;stashname&gt;) 恢复并删除</li></ul><h3 id="8-tag"><a href="#8-tag" class="headerlink" title="8. tag"></a>8. tag</h3><ul><li>git tag 查看所有标签</li><li>git tag &lt;tagname&gt; 给 HEAD 指向打 tag<br>   -d 删除标签</li><li>git tag &lt;tagname&gt; &lt;commit&gt;</li><li>git tag -a &lt;tagname&gt; -m &lt;annotation&gt; &lt;commit&gt; 创有说明的标签</li><li>git show &lt;tagname&gt; 显示说明</li><li>git push origin &lt;tagname&gt; 推送某个标签<br>   –tags 是推送所有标签</li></ul><h3 id="9-config"><a href="#9-config" class="headerlink" title="9. config"></a>9. config</h3><ul><li>git config –global –list</li><li>git config –global user.name xx</li><li>git config –global user.email “<a href="mailto:&#x65;&#109;&#x61;&#x69;&#x6c;&#64;&#101;&#x6d;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;">&#x65;&#109;&#x61;&#x69;&#x6c;&#64;&#101;&#x6d;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a> ”</li></ul><h2 id="杂"><a href="#杂" class="headerlink" title="杂"></a>杂</h2><ol><li><p>HEAD表示当前分支最新提交版本，HEAD^上个版本，HEAD^^上上个版本，上100个版本可以写HEAD~100</p></li><li><p>git status 查看状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs git">Untracked files 未跟踪(新创建，从未add过的文件)<br>Changes not staged for commit 未add<br>Changes to be committed add但未commit<br></code></pre></td></tr></table></figure></li><li><p>分支间相同文件进行不同修改会有冲突，此时merge失败<br>此时可以用 git status 告诉我们冲突文件<br>查看文件内容，Git用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支的内容<br>修改(修改成你想要的样子，可以与所有分支都不同)，add，commit。就能成功合并了(不用再merge，相当于merge失败→修改→add，commit→合并成功)</p></li><li><p>origin&#x2F;dev 像调用本地分支一样调用远程分支(其实两者没什么差别)</p></li><li><p>使用 https 协议，可以通过设置 credential helper 来只用第一次输入密码<br>git config –global credential.helper store  &#x2F;&#x2F;这是全局配置，执行后，会在用户目录下(这里没有指定位置)生成 .git_credential 里面存储着账号和密码</p></li><li><p>使用 ssh(git) 协议更快，设置密钥后才能使用</p></li><li><p>git merge 和 git rebase</p><p>git merge master feature 将 master 合并到 feature 上</p><p>git merge 每次合并上游更改时 feature 分支都会引入一个外来的合并提交。如果 master 非常活跃的话，这或多或少会污染你的分支历史。</p><p>git rebase 它会把整个 feature 分支移动到 master 分支的后面，有效地把所有 master 分支上新的提交并入过来。但是，rebase 为原分支上每一个提交创建一个新的提交，重写了项目历史，并且不会带来合并提交。</p><p>不过，这种简单的提交历史会带来两个后果：安全性和可跟踪性。如果你违反了 rebase 黄金法则，重写项目历史可能会给你的协作工作流带来灾难性的影响。此外，rebase 不会有合并提交中附带的信息——你看不到 feature 分支中并入了上游的哪些更改。</p><p>综上，rebase 适用于开发 feature 分支时，master 分支已经被更新，需要再在新的 master 分支下开发，这时就可以用 rebase 将当前分支移动到 新的master 分支后</p></li></ol><h2 id="代码回滚"><a href="#代码回滚" class="headerlink" title="代码回滚"></a>代码回滚</h2><ol><li><p>工作区：<br>git checkout – a.txt<br>git checkout – .  所有<br>git checkout &lt;commitID&gt;(head) &lt;filename&gt;</p></li><li><p>暂存区：<br>git reset HEAD .<br>git reset HEAD a.txt<br>不加参数是采用了默认的 –mixed 参数  </p><p>只改变暂存区，所以如果想再还原工作区，需要用到1</p></li><li><p>本地分支<br>git log 得到提交id<br>git reset –hard HEAD^ 回到最新的一次提交<br>git reset –hard <commit_id> 回到你想要的版本<br>git reset HEAD^ 此时代码保留，回到 git add 之前</p></li><li><p>远程仓库<br>git log<br>git reset –hard <commit_id><br>git push -f origin HEAD(或者当前分支名) 强制提交<br>or<br>git revert HEAD<br>git push origin master(不用 -f 了)</p></li><li><p>git rever 和 git reset 区别</p><p>- git revert是用一次新的commit来回滚之前的commit，此次提交之前的commit都会被保留；<br>- git reset是回到某次提交，提交及之前的commit都会被保留，但是此commit id之后的修改都会被删除</p></li><li><p>git commit –amend -m ‘sdfa’</p><p>相当于删除上次提交，换成当前这次</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>program</category>
      
      <category>tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
